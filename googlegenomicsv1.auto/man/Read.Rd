% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genomics_objects.R
\name{Read}
\alias{Read}
\title{Read Object}
\usage{
Read(Read.info = NULL, id = NULL, readGroupId = NULL,
  readGroupSetId = NULL, fragmentName = NULL, properPlacement = NULL,
  duplicateFragment = NULL, fragmentLength = NULL, readNumber = NULL,
  numberReads = NULL, failedVendorQualityChecks = NULL, alignment = NULL,
  secondaryAlignment = NULL, supplementaryAlignment = NULL,
  alignedSequence = NULL, alignedQuality = NULL, nextMatePosition = NULL,
  info = NULL)
}
\arguments{
\item{Read.info}{The \link{Read.info} object or list of objects}

\item{id}{The server-generated read ID, unique across all reads}

\item{readGroupId}{The ID of the read group this read belongs to}

\item{readGroupSetId}{The ID of the read group set this read belongs to}

\item{fragmentName}{The fragment name}

\item{properPlacement}{The orientation and the distance between reads from the fragment are consistent with the sequencing protocol (SAM flag 0x2)}

\item{duplicateFragment}{The fragment is a PCR or optical duplicate (SAM flag 0x400)}

\item{fragmentLength}{The observed length of the fragment, equivalent to TLEN in SAM}

\item{readNumber}{The read number in sequencing}

\item{numberReads}{The number of reads in the fragment (extension to SAM flag 0x1)}

\item{failedVendorQualityChecks}{Whether this read did not pass filters, such as platform or vendor quality controls (SAM flag 0x200)}

\item{alignment}{The linear alignment for this alignment record}

\item{secondaryAlignment}{Whether this alignment is secondary}

\item{supplementaryAlignment}{Whether this alignment is supplementary}

\item{alignedSequence}{The bases of the read sequence contained in this alignment record, **without CIGAR operations applied** (equivalent to SEQ in SAM)}

\item{alignedQuality}{The quality of the read sequence contained in this alignment record (equivalent to QUAL in SAM)}

\item{nextMatePosition}{The mapping of the primary alignment of the `(readNumber+1)%numberReads` read in the fragment}

\item{info}{A map of additional read alignment information}
}
\value{
Read object
}
\description{
Read Object
}
\details{
Autogenerated via \code{\link[googleAuthR]{gar_create_api_objects}}
A read alignment describes a linear alignment of a string of DNA to a reference sequence, in addition to metadata about the fragment (the molecule of DNA sequenced) and the read (the bases which were read by the sequencer). A read is equivalent to a line in a SAM file. A read belongs to exactly one read group and exactly one read group set. For more genomics resource definitions, see [Fundamentals of Google Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) ### Reverse-stranded reads Mapped reads (reads having a non-null `alignment`) can be aligned to either the forward or the reverse strand of their associated reference. Strandedness of a mapped read is encoded by `alignment.position.reverseStrand`. If we consider the reference to be a forward-stranded coordinate space of `[0, reference.length)` with `0` as the left-most position and `reference.length` as the right-most position, reads are always aligned left to right. That is, `alignment.position.position` always refers to the left-most reference coordinate and `alignment.cigar` describes the alignment of this read to the reference from left to right. All per-base fields such as `alignedSequence` and `alignedQuality` share this same left-to-right orientation; this is true of reads which are aligned to either strand. For reverse-stranded reads, this means that `alignedSequence` is the reverse complement of the bases that were originally reported by the sequencing machine. ### Generating a reference-aligned sequence string When interacting with mapped reads, it's often useful to produce a string representing the local alignment of the read to reference. The following pseudocode demonstrates one way of doing this: out = '' offset = 0 for c in read.alignment.cigar { switch c.operation { case 'ALIGNMENT_MATCH', 'SEQUENCE_MATCH', 'SEQUENCE_MISMATCH': out += read.alignedSequence[offset:offset+c.operationLength] offset += c.operationLength break case 'CLIP_SOFT', 'INSERT': offset += c.operationLength break case 'PAD': out += repeat('*', c.operationLength) break case 'DELETE': out += repeat('-', c.operationLength) break case 'SKIP': out += repeat(' ', c.operationLength) break case 'CLIP_HARD': break } } return out ### Converting to SAM's CIGAR string The following pseudocode generates a SAM CIGAR string from the `cigar` field. Note that this is a lossy conversion (`cigar.referenceSequence` is lost). cigarMap = { 'ALIGNMENT_MATCH': 'M', 'INSERT': 'I', 'DELETE': 'D', 'SKIP': 'N', 'CLIP_SOFT': 'S', 'CLIP_HARD': 'H', 'PAD': 'P', 'SEQUENCE_MATCH': '=', 'SEQUENCE_MISMATCH': 'X', } cigarStr = '' for c in read.alignment.cigar { cigarStr += c.operationLength + cigarMap[c.operation] } return cigarStr
}
\seealso{
Other Read functions: \code{\link{Read.info}}
}

